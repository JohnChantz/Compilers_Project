/**
 *  This code is part of the lab exercises for the Compilers course
 *  at Harokopio University of Athens, Dept. of Informatics and Telematics.
 */

import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

parser code
{:
    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};

terminal java.lang.String IDENTIFIER;       // name
terminal PRINT;
terminal LPAREN, RPAREN, SEMICOLON;
terminal ASSIGN;
terminal TIMES, DIVISION;
terminal PLUS, MINUS, UMINUS;
terminal GREATERTHAN,LESSTHAN,GREATEREQUALTHAN,LESSEQUALTHAN;
terminal EQUAL,NOTEQUAL;
terminal LBRACKET,RBRACKET;
terminal WHILE;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Double  DOUBLE_LITERAL;
terminal java.lang.String  STRING_LITERAL;

non terminal Expr;
non terminal Stmt;
non terminal StmtList;
non terminal CompUnit;
non terminal CompStmt;

precedence left EQUAL,NOTEQUAL;
precedence left GREATERTHAN,LESSTHAN,GREATEREQUALTHAN,LESSEQUALTHAN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION;
precedence right UMINUS;

start with CompUnit;

CompUnit ::= 
           | StmtList
           ;

StmtList ::= Stmt
           | StmtList Stmt
           ;              

CompStmt ::= LBRACKET RBRACKET
           | LBRACKET StmtList RBRACKET
           ;

Stmt ::= PRINT LPAREN Expr RPAREN SEMICOLON
       | IDENTIFIER ASSIGN Expr SEMICOLON
       | WHILE LPAREN Expr RPAREN Stmt
       | CompStmt
       ;

Expr ::= INTEGER_LITERAL
       | DOUBLE_LITERAL
       | STRING_LITERAL
       | IDENTIFIER
       | LPAREN Expr RPAREN
       | Expr PLUS Expr
       | Expr MINUS Expr
       | Expr TIMES Expr
       | Expr DIVISION Expr
       | Expr GREATERTHAN Expr
       | Expr LESSTHAN Expr
       | Expr GREATEREQUALTHAN Expr
       | Expr LESSEQUALTHAN Expr
       | Expr EQUAL Expr
       | Expr NOTEQUAL Expr
       | MINUS Expr %prec UMINUS
       ;
