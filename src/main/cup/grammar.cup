/**
 *  This code is part of the lab exercises for the Compilers course
 *  at Harokopio University of Athens, Dept. of Informatics and Telematics.
 */

package org.hua;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.objectweb.asm.Type;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.hua.ast.*;

parser code
{:
    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};

/*Terminals*/
terminal THIS,NULL,NEW;
terminal DO, WHILE;
terminal LPAREN, RPAREN;
terminal LBRACKET, RBRACKET;
terminal GREATER, GREATER_EQ, LESS, LESS_EQ;
terminal EQUAL, NOT_EQUAL, NOT, ASSIGN, WRITE,PRINT;
terminal TIMES, DIVISION, MOD;
terminal PLUS, MINUS, UMINUS;
terminal IF,ELSE;
terminal DOT,COMMA, SEMICOLON;
terminal AND, OR;
terminal RETURN, BREAK, CONTINUE;
terminal NUMBER, STRING, VOID, CLASS;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Double  DOUBLE_LITERAL;
terminal java.lang.String  STRING_LITERAL;
terminal java.lang.String IDENTIFIER;

/*Non Terminals*/
non terminal Expression Expr;
non terminal Statement Stmt;
non terminal ArrayList<Statement> StmtList;
non terminal CompilationUnit CompilationUnit;
non terminal CompoundStatement CompoundStmt;
non terminal ArrayList<Expression> ExprList;
non terminal ClassDefinition ClassDefinition;
non terminal ArrayList<ClassDefinition> ClassDefinitionList;
non terminal FieldOrFunctionDefinition FieldOrFunctionDefinition;
non terminal ArrayList<FieldOrFunctionDefinition> FieldOrFunctionDefinitionList;
non terminal FieldDefinition FieldDefinition;
non terminal FunctionDefinition FunctionDefinition;
non terminal ArrayList<FunctionDefinition> FunctionDefinitionList;
non terminal ArrayList<ParameterDeclaration> ParameterList;
non terminal ParameterDeclaration ParameterDeclaration;
non terminal Type TypeSpecifier;
non terminal ArrayList<Definitions> DefinitionsList;
non terminal Definitions Definitions;

/*Precedence of operators*/
precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LESS, LESS_EQ, GREATER, GREATER_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION, MOD;
precedence right NEW;
precedence right UMINUS, NOT;
precedence left LPAREN, RPAREN, DOT;

/*Grammar*/
start with CompilationUnit;

CompilationUnit ::= /*empty*/
                    {:
                        RESULT = new CompilationUnit();
                        RESULT.setLine(0);
                        RESULT.setColumn(0);
                    :}
                 | DefinitionsList:list
                   {:
                   	RESULT = new CompilationUnit(list);
                   	RESULT.setLine(listleft);
                   	RESULT.setColumn(listright);
                   :}
                  ;
                  
Definitions ::= ClassDefinition:cd
                {:
                   RESULT = new Definitions(cd,null);
                   RESULT.setLine(cdleft); 
                   RESULT.setColumn(cdright);
                :}
              | FunctionDefinition:fd
                {:
                   RESULT = new Definitions(null,fd);
                   RESULT.setLine(fdleft); 
                   RESULT.setColumn(fdright);
                :}
              ;
			
DefinitionsList ::= Definitions:d
                    {:
                        RESULT = new ArrayList<Definitions>();
                        RESULT.add(d);
                    :}
                  | DefinitionsList:dl Definitions:d
                    {:
                        dl.add(d);
                        RESULT = dl;
                    :}
                  ;

ClassDefinition ::= CLASS IDENTIFIER:i LBRACKET RBRACKET
                    {:
                        RESULT = new ClassDefinition(i);
                        RESULT.setLine(ileft);
                        RESULT.setColumn(iright);
                    :}
                  | CLASS IDENTIFIER:i LBRACKET FieldOrFunctionDefinitionList:list RBRACKET
                    {:
                        RESULT = new ClassDefinition(i,list);
                        RESULT.setLine(ileft);
                        RESULT.setColumn(iright);
                    :}
                  ;

ClassDefinitionList ::= ClassDefinition:c
                        {:
                            RESULT = new ArrayList<ClassDefinition>();
                            RESULT.add(c);
                        :}
                      | ClassDefinitionList:list ClassDefinition:c
                        {:
                            list.add(c);
                            RESULT = list;
                        :}
                      ;

FieldOrFunctionDefinition ::= FieldDefinition:fd
                              {:
                                 RESULT = new FieldOrFunctionDefinition(fd,null);
                                 RESULT.setLine(fdleft);
                                 RESULT.setColumn(fdright);
                              :}
                            | FunctionDefinition:fc
                              {:
                                 RESULT = new FieldOrFunctionDefinition(null,fc);
                                 RESULT.setLine(fcleft);
                                 RESULT.setColumn(fcright);
                              :}
                            ;

FieldOrFunctionDefinitionList ::= FieldOrFunctionDefinition:d
                                  {:
                                    RESULT = new ArrayList<FieldOrFunctionDefinition>();
                                    RESULT.add(d);
                                  :}
                                | FieldOrFunctionDefinitionList:list FieldOrFunctionDefinition:d
                                  {:
                                    list.add(d);
                                    RESULT = list;
                                  :}
                                ;

FieldDefinition ::= TypeSpecifier:ts IDENTIFIER:i SEMICOLON
                    {:
                        RESULT = new FieldDefinition(ts,i);
                        RESULT.setLine(ileft);
                        RESULT.setColumn(iright);
                    :}
                  ;

FunctionDefinition ::= TypeSpecifier:t IDENTIFIER:i LPAREN ParameterList:pl RPAREN CompoundStmt:cs
                       {:
                            RESULT = new FunctionDefinition(t,i,pl,cs);
                            RESULT.setLine(ileft);
                            RESULT.setColumn(iright);
                       :}
                     ;

FunctionDefinitionList ::= FunctionDefinition:f
                           {:
                                RESULT = new ArrayList<FunctionDefinition>();
                                RESULT.add(f);
                           :}
                         | FunctionDefinitionList:list FunctionDefinition:f
                           {:
                                list.add(f);
                                RESULT = list;
                           :}
                         ;

ParameterList ::= /*empty*/
                  {:
                     RESULT = new ArrayList<ParameterDeclaration>();
                  :}
                | ParameterDeclaration:p
                  {:
                    RESULT = new ArrayList<ParameterDeclaration>();
                    RESULT.add(p);
                  :}
                | ParameterList:list COMMA ParameterDeclaration:p
                  {:
                    list.add(p);
                    RESULT = list;
                  :}
                ;

ParameterDeclaration ::= TypeSpecifier:ts IDENTIFIER:i
                         {:
                            RESULT = new ParameterDeclaration(ts,i);
                            RESULT.setLine(ileft);
                            RESULT.setColumn(iright);
                         :}
                       ;

TypeSpecifier ::= NUMBER:n
                  {:
                    RESULT = Type.INT_TYPE;
                  :}
                | STRING:s
                  {:
                    RESULT = Type.getType(String.class);
                  :}
                | VOID:v
                  {:
                    RESULT = Type.VOID_TYPE;
                  :}
                | IDENTIFIER:i
                  {:
                    RESULT = Type.getType(i);
                  :}
                ;

CompoundStmt ::= LBRACKET:lb RBRACKET
                 {:
                    RESULT = new CompoundStatement();
                    RESULT.setLine(lbleft);
                    RESULT.setColumn(lbright);
                 :}
               | LBRACKET:lb StmtList:list RBRACKET
                 {:
                    RESULT = new CompoundStatement(list);
                    RESULT.setLine(lbleft);
                    RESULT.setColumn(lbright);
                 :}
               ;

Stmt ::= WRITE:wr LPAREN Expr:e RPAREN SEMICOLON
         {:
             RESULT = new WriteStatement(e);
             RESULT.setLine(wrleft);
             RESULT.setColumn(wrright);
         :}
       | WHILE:w LPAREN Expr:e RPAREN CompoundStmt:cs
         {:
             RESULT = new WhileStatement(e,cs);
             RESULT.setLine(wleft);
             RESULT.setColumn(wright);
         :}
       | IF:i LPAREN Expr:e RPAREN CompoundStmt:cs
         {:
             RESULT = new IfStatement(e,cs);
             RESULT.setLine(ileft);
             RESULT.setColumn(iright);
         :}
       | IF:i LPAREN Expr:e RPAREN CompoundStmt:cs1 ELSE CompoundStmt:cs2
         {:
             RESULT = new IfElseStatement(e,cs1,cs2);
             RESULT.setLine(ileft);
             RESULT.setColumn(iright);
         :}
       | Expr:e1 ASSIGN Expr:e2 SEMICOLON
         {:
            RESULT = new AssignmentStatement(e1,e2);
            RESULT.setLine(e1left);
            RESULT.setColumn(e1right);
         :}
       | Expr:e SEMICOLON
         {:
            RESULT = new PlainStatement(e);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       | RETURN Expr:e SEMICOLON
         {:
            RESULT = new ReturnStatement(e);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       | BREAK:b SEMICOLON
         {:
            RESULT = new BreakStatement();
            RESULT.setLine(bleft);
            RESULT.setColumn(bright);
         :}
       | CONTINUE:c SEMICOLON
         {:
            RESULT = new ContinueStatement();
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
         :}
       | CompoundStmt:c
         {:
            RESULT = new CompoundStatement();
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
         :}
       | TypeSpecifier:t IDENTIFIER:i SEMICOLON
         {:
            RESULT = new TypeSpecifierStatement(t,i);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | DO CompoundStmt:c WHILE LPAREN Expr:e RPAREN SEMICOLON
         {:
            RESULT = new DoWhileStatement(e,c);
            RESULT.setLine(cleft);
            RESULT.setColumn(cright);
         :}
       ;

StmtList ::= Stmt:s
             {:
                RESULT = new ArrayList<Statement>();
                RESULT.add(s);
             :}
           | StmtList:list Stmt:s
             {:
                list.add(s);
                RESULT = list;
             :}
           ;

Expr ::= /*empty*/
         {:
            RESULT = new IdentifierExpression("");
         :}
       | INTEGER_LITERAL:l
         {:
            RESULT = new IntegerLiteralExpression(l);
            RESULT.setLine(lleft);
            RESULT.setColumn(lright);
         :}
       | DOUBLE_LITERAL:l
         {:
            RESULT = new DoubleLiteralExpression(l);
            RESULT.setLine(lleft);
            RESULT.setColumn(lright);
         :}
       | STRING_LITERAL:l
         {:
            RESULT = new StringLiteralExpression(l);
            RESULT.setLine(lleft);
            RESULT.setColumn(lright);
         :}
       | THIS:t
         {:
            RESULT = new ThisExpression();
            RESULT.setLine(tleft);
            RESULT.setColumn(tright);
         :}
       | NULL:n
         {:
            RESULT = new NullExpression();
            RESULT.setLine(nleft);
            RESULT.setColumn(nright);
         :}
       | IDENTIFIER:i
         {:
            RESULT = new IdentifierExpression(i);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | IDENTIFIER:i LPAREN ExprList:list RPAREN
         {:
            RESULT = new FunctionCallExpression(i,list);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | NEW IDENTIFIER:i LPAREN ExprList:list RPAREN
         {:
            RESULT = new NewExpression(i,list);
            RESULT.setLine(ileft);
            RESULT.setColumn(iright);
         :}
       | Expr:e DOT IDENTIFIER:i
         {:
            RESULT = new DotExpression(e,i);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       | Expr:e DOT IDENTIFIER:i LPAREN ExprList:list RPAREN
         {:
            RESULT = new DotExpressionList(e,i,list);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       | LPAREN Expr:e RPAREN
         {:
            RESULT = new ParenthesisExpression(e);
            RESULT.setLine(eleft);
            RESULT.setColumn(eright);
         :}
       | Expr:e1 PLUS Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 MINUS Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 TIMES Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.MULTIPLY, e1, e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 DIVISION Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.DIVISION, e1, e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 MOD Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.MOD, e1, e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 EQUAL Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.EQUAL,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 NOT_EQUAL Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.NOT_EQUAL,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | NOT Expr:e
         {:
           RESULT = new UnaryExpression(Operator.NOT, e);
           RESULT.setLine(eleft);
           RESULT.setColumn(eright);
         :}
       | Expr:e1 LESS Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.LESS,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 LESS_EQ Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.LESS_EQUAL,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 GREATER Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.GREATER,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 GREATER_EQ Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.GREATER_EQUAL,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 AND Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.AND,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | Expr:e1 OR Expr:e2
         {:
           RESULT = new BinaryExpression(Operator.OR,e1,e2);
           RESULT.setLine(e1left);
           RESULT.setColumn(e2right);
         :}
       | MINUS:m Expr:e
         {:
           RESULT = new UnaryExpression(Operator.MINUS, e);
           RESULT.setLine(mleft);
           RESULT.setColumn(mright);
         :}
         %prec UMINUS
       ;

ExprList ::= Expr:e
             {:
                RESULT = new ArrayList<Expression>();
                RESULT.add(e);
             :}
           | ExprList:list COMMA Expr:e
             {:
                list.add(e);
                RESULT = list;
             :}
          ;